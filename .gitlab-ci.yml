---
stages:
  - test
  - release
  - integration-test

jsonlint:
  stage: test
  image: registry.gitlab.com/pipeline-components/jsonlint:latest
  script:
    - |
      find . -not -path './.git/*' -name '*.json' -type f -print0 |
      parallel --will-cite -k -0 -n1 jsonlint -q

shellcheck:
  stage: test
  image: registry.gitlab.com/pipeline-components/shellcheck:latest
  script:
    - |
      find . -not -path './.git/*' -name '*.sh' -type f -print0 |
      parallel --will-cite -k -0 -n1 shellcheck -x

.go_template_defaults:
  stage: test
.semver_template_defaults:
  stage: release
variables:
  SEMVER_PREFIX: v
include:
  - { project: fsrvcorp/templates, file: templates/language/go.yml }
  - { project: fsrvcorp/templates, file: templates/release/semver.yml }
  - template: Security/Dependency-Scanning.gitlab-ci.yml

lint-frontend:
  stage: test
  image: node:latest@sha256:6b3f9aa7eefa8d4c93d43914e78aa2bfea9a12808b0059e5da78854dfa8b8768
  script:
    - cd pkg/web/frontend
    - npm install
    - npm run lint
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - pkg/web/frontend/node_modules/
      - pkg/web/frontend/dist/
  artifacts:
    paths:
      - pkg/web/frontend/dist/

build frontend:
  stage: integration-test
  image: node:latest@sha256:6b3f9aa7eefa8d4c93d43914e78aa2bfea9a12808b0059e5da78854dfa8b8768
  needs:
    - lint-frontend
  script:
    - cd pkg/web/frontend
    - npm install
    - NODE_ENV=production npm run build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - pkg/web/frontend/node_modules/
      - pkg/web/frontend/dist/
  artifacts:
    paths:
      - pkg/web/frontend/dist/

build initrd:
  stage: integration-test
  image: archlinux:base@sha256:99807b5ce1017b5072f5c028d0209e97e3ab0341368880c05f3e4438ed1be5f1
  before_script:
    - mkdir -p cache >/dev/null
    - cp -a cache/* /var/cache/pacman/pkg/ || true
    - pacman -Syy --noconfirm base-devel rsync wget go gzip cpio
    - cp -a /var/cache/pacman/pkg/* cache/ >/dev/null
  needs:
    - build frontend
  script:
    - make build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - cache/
  artifacts:
    paths:
      - rootfs.cpio.gz

download kernel:
  image: archlinux:latest@sha256:99807b5ce1017b5072f5c028d0209e97e3ab0341368880c05f3e4438ed1be5f1
  stage: integration-test
  variables:
    KERNEL_URL: "https://ref.ci/fsrvcorp/miniland/kernel/-/jobs/34031/artifacts/raw/linux/arch/x86/boot/bzImage"
  script:
    - pacman -Syy --noconfirm wget >/dev/null 2>/dev/null
    - wget "${KERNEL_URL}"
  artifacts:
    paths:
      - bzImage
    expire_in: 1 day

build iso image:
  image: archlinux:base@sha256:99807b5ce1017b5072f5c028d0209e97e3ab0341368880c05f3e4438ed1be5f1
  stage: integration-test
  needs:
    - build initrd
    - download kernel
  before_script:
    - pacman -Syy --noconfirm cdrkit wget
  script:
    - mkdir -p CD_root/isolinux
    - cp rootfs.cpio.gz CD_root/initrd
    - cp bzImage CD_root/bzImage
    - wget https://mirrors.edge.kernel.org/pub/linux/utils/boot/syslinux/6.xx/syslinux-6.03.tar.gz
    - tar -xzf syslinux-6.03.tar.gz
    - cp assets/isofs/{isolinux.cfg,boot.txt} CD_root/isolinux/
    - cp syslinux-6.03/bios/core/isolinux.bin CD_root/isolinux/
    - cp syslinux-6.03/bios/com32/elflink/ldlinux/ldlinux.c32 CD_root/isolinux/
    - mkisofs -o output.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table CD_root
  artifacts:
    paths:
      - output.iso
    expire_in: 1 day

rollout testvm:
  stage: integration-test
  interruptible: true
  dependencies:
    - build iso image
  needs:
    - build iso image
  tags:
    - proxmox-runner-dro1
  script:
    - export VMID=$(bash assets/scripts/string2vmid.sh "${CI_COMMIT_REF_NAME}")
    - echo "VMID:${VMID}"
    - echo "VMID=${VMID}" > review.env
    - pvesh get /cluster/nextid -vmid "${VMID}" >/dev/null 2>/dev/null || (qm stop "${VMID}" ; qm destroy "${VMID}")
    - cp output.iso /var/lib/vz/template/iso/output-${VMID}.iso
    - qm create ${VMID}
      --cdrom local:iso/output-${VMID}.iso
      --name "miniland-review-${VMID}"
      --ostype l26
      --memory 2048
      --cores 2
      --net0 virtio,bridge=vmbr0
      --vga virtio
      --description "Pipeline = ${CI_PIPELINE_URL}<br>Branch = ${CI_COMMIT_REF_NAME}<br>Commit = ${CI_COMMIT_SHA}"
    - if [ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]; then qm start "${VMID}"; fi
  artifacts:
    reports:
      dotenv: review.env
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    on_stop: remove testvm

remove testvm:
  stage: integration-test
  tags:
    - proxmox-runner-dro1
  needs:
    - rollout testvm
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
  script:
    - qm stop ${VMID} || true
    - qm destroy ${VMID} || true
    - rm /var/lib/vz/template/iso/output-${VMID}.iso

.testvm_defaults:
  image: archlinux:latest@sha256:99807b5ce1017b5072f5c028d0209e97e3ab0341368880c05f3e4438ed1be5f1
  stage: integration-test
  tags:
    - kubernetes-runner-dro1
  variables:
    TESTVM_IP: 100.64.70.93
  needs:
    - rollout testvm

network connectivity:
  extends: .testvm_defaults
  timeout: 10m
  script:
    - |
      until ping -c 1 "${TESTVM_IP}"; do
        sleep 1
      done

web server connectivity:
  extends: .testvm_defaults
  image: curlimages/curl:latest@sha256:961cf9e2a1939ea380b3f16e313a581b5d4681dd9dc4b1ace060eb396a71df0d
  variables:
    GIT_STRATEGY: none
  needs:
    - network connectivity
  timeout: 10m
  script:
    - curl -I "${TESTVM_IP}:8080/"

prometheus server connectivity:
  extends: .testvm_defaults
  image: curlimages/curl:latest@sha256:961cf9e2a1939ea380b3f16e313a581b5d4681dd9dc4b1ace060eb396a71df0d
  variables:
    GIT_STRATEGY: none
  needs:
    - network connectivity
  timeout: 10m
  script:
    - curl "${TESTVM_IP}:9090/api/v1/targets"